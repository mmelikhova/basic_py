[{"keyword": "Feature", "uri": "bdd\\groups.feature", "name": "bdd\\groups.feature", "id": "bdd\\groups.feature", "line": 1, "description": "", "tags": [], "elements": [{"keyword": "Scenario", "id": "test_add_new_group[name1-header1-footer1]", "name": "Add new group", "line": 1, "description": "", "tags": [], "type": "scenario", "steps": [{"keyword": "Given", "name": "a group list", "line": 2, "match": {"location": ""}, "result": {"status": "passed", "duration": 14960527}}, {"keyword": "Given", "name": "a group with <name>, <header> and <footer>", "line": 3, "match": {"location": ""}, "result": {"status": "passed", "duration": 0}}, {"keyword": "When", "name": "I add the group to the list", "line": 4, "match": {"location": ""}, "result": {"status": "passed", "duration": 13091272354}}, {"keyword": "Then", "name": "the new group list is equal to the old list with the added group", "line": 5, "match": {"location": ""}, "result": {"status": "passed", "duration": 1994371}}]}, {"keyword": "Scenario", "id": "test_add_new_group[name2-header2-footer2]", "name": "Add new group", "line": 1, "description": "", "tags": [], "type": "scenario", "steps": [{"keyword": "Given", "name": "a group list", "line": 2, "match": {"location": ""}, "result": {"status": "passed", "duration": 998497}}, {"keyword": "Given", "name": "a group with <name>, <header> and <footer>", "line": 3, "match": {"location": ""}, "result": {"status": "passed", "duration": 0}}, {"keyword": "When", "name": "I add the group to the list", "line": 4, "match": {"location": ""}, "result": {"status": "passed", "duration": 1482318878}}, {"keyword": "Then", "name": "the new group list is equal to the old list with the added group", "line": 5, "match": {"location": ""}, "result": {"status": "passed", "duration": 9972810}}]}, {"keyword": "Scenario", "id": "test_delete_group", "name": "Delete a group", "line": 13, "description": "", "tags": [], "type": "scenario", "steps": [{"keyword": "Given", "name": "a non-empty group list", "line": 14, "match": {"location": ""}, "result": {"status": "passed", "duration": 97738504}}, {"keyword": "Given", "name": "a random group from the list", "line": 15, "match": {"location": ""}, "result": {"status": "passed", "duration": 0}}, {"keyword": "When", "name": "I delete a group from the list", "line": 16, "match": {"location": ""}, "result": {"status": "passed", "duration": 631309986}}, {"keyword": "Then", "name": "the new group list is equal to the old list without the deleted group", "line": 17, "match": {"location": ""}, "result": {"status": "passed", "duration": 3990650}}]}, {"keyword": "Scenario", "id": "test_modify_group[name1-header2-footer2]", "name": "Modify a group", "line": 20, "description": "", "tags": [], "type": "scenario", "steps": [{"keyword": "Given", "name": "a non-empty group list", "line": 21, "match": {"location": ""}, "result": {"status": "passed", "duration": 233374834}}, {"keyword": "Given", "name": "a random group from the list", "line": 22, "match": {"location": ""}, "result": {"status": "passed", "duration": 0}}, {"keyword": "Given", "name": "a group with <name>, <header> and <footer>", "line": 23, "match": {"location": ""}, "result": {"status": "passed", "duration": 996351}}, {"keyword": "When", "name": "I modify the group in the list", "line": 24, "match": {"location": ""}, "result": {"status": "failed", "error_message": "request = <FixtureRequest for <Function test_modify_group[name1-header2-footer2]>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\n..\\..\\shiningpanda\\jobs\\5b4a7ae6\\virtualenvs\\d41d8cd9\\lib\\site-packages\\pytest_bdd\\scenario.py:200: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\shiningpanda\\jobs\\5b4a7ae6\\virtualenvs\\d41d8cd9\\lib\\site-packages\\pytest_bdd\\scenario.py:166: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\n..\\..\\shiningpanda\\jobs\\5b4a7ae6\\virtualenvs\\d41d8cd9\\lib\\site-packages\\pytest_bdd\\scenario.py:115: in _execute_step_function\n    step_func(**kwargs)\nbdd\\group_steps.py:64: in modify_group\n    app.group.modify_group_by_id(group_modify.id, group_modify)\nfixture\\group.py:81: in modify_group_by_id\n    self.select_group_by_id(id)\nfixture\\group.py:76: in select_group_by_id\n    wd.find_element_by_css_selector(\"input[value='%s']\" % id).click()\n..\\..\\shiningpanda\\jobs\\5b4a7ae6\\virtualenvs\\d41d8cd9\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:598: in find_element_by_css_selector\n    return self.find_element(by=By.CSS_SELECTOR, value=css_selector)\n..\\..\\shiningpanda\\jobs\\5b4a7ae6\\virtualenvs\\d41d8cd9\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:976: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\n..\\..\\shiningpanda\\jobs\\5b4a7ae6\\virtualenvs\\d41d8cd9\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x03BB3E98>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"Unable to locate element: input[value=\\'90: n...ror@chrome://marionette/content/error.js:387:5\\\\nelement.find/</<@chrome://marionette/content/element.js:330:16\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: Unable to locate element: input[value='90: name1: header2: footer2']\n\n..\\..\\shiningpanda\\jobs\\5b4a7ae6\\virtualenvs\\d41d8cd9\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: NoSuchElementException", "duration": 2027877807}}, {"keyword": "Then", "name": "the new group list is equal to the old list with the modified group", "line": 25, "match": {"location": ""}, "result": {"status": "failed", "error_message": "", "duration": 0}}]}]}]